import sys

class Edge:

    def __init__(self, vertex1, vertex2, weight):
        self.vertex1 = vertex1
        self.vertex2 = vertex2
        self.weight = weight

   
class Graph:

    def __init__(self, edges=None):
        # Dictionary Of Vertices in Graph
        self.adjList = {}
        self.vertices = {}
        self.visitedVertices = []
        self.unVisitedVertices = []

        # Maintain edges in the Graph Object
        self.edges = []

        if edges is not None:
            for edge in edges:
                self.addEdge(edge)



    # UnDirected Graph, we will add both users to each others adjacency list
    # For Directed Graph we must set isDirected to True
    def addEdge(self, edge, isDirected=False):

        self.edges.append([edge.vertex1,edge.vertex2 , edge.weight])

        if edge.vertex1 not in self.vertices:
            self.adjList[edge.vertex1] = []
            self.vertices[edge.vertex1] = [None, sys.maxsize]
            self.unVisitedVertices.append(edge.vertex1)

        if edge.vertex2 not in self.vertices:
            self.adjList[edge.vertex2] = []
            self.vertices[edge.vertex2] = [None, sys.maxsize]
            self.unVisitedVertices.append(edge.vertex2)

        # Maintain Adjacency List
        # Maintain the data in List of Vertices
        self.adjList[edge.vertex1].append(edge.vertex2)

        if not isDirected:
            self.adjList[edge.vertex2].append(edge.vertex1)


    def printGraph(self):
        print("Number of Vertices in Graph:", len(self.adjList))

        keys = self.adjList.keys()

        # Printing Adjacency List
        for key in keys:
            # print(">> Adjacency List for Vertex:", key)
            print(key, ":", end=" ")
            print(self.adjList[key], end=" ")
            print()
            print("----------------------------------")

    def printVertices(self):
        print("Number of Vertices in Graph:", len(self.vertices))
        keys = self.vertices.keys()
        print("-----------------------------------------")
        print("{}  |  {}  |  {} ".format("Vertex", "Parent", "Weight"))
        print("-----------------------------------------")
        for key in keys:
            print("   {}    |   {}   |  {} ".format(key, self.vertices[key][0], self.vertices[key][1]))

        print(">> Visited Vertices:", self.visitedVertices)
        print(">> UnVisited Vertices:", self.unVisitedVertices)
        print(self.vertices)
        print(self.edges)


    def prims(self, sourceVertex):
        self.visitedVertices.append(sourceVertex)
        self.unVisitedVertices.remove(sourceVertex)
        nextVertex = None
        for i in range (len(self.adjList[sourceVertex])):
            vertex1 = sourceVertex
            vertex2 = self.adjList[sourceVertex][i]
            weight = self.vertices[sourceVertex][1]
            for j in range (len(self.edges)):
                if self.edges[j][0] == vertex1 and self.edges[j][1] == vertex2 or self.edges[j][0] == vertex2 and self.edges[j][1] == vertex1:
                    tempweight = self.edges[j][2]
                    break
            if weight > tempweight:
                if vertex2 not in self.visitedVertices:
                    weight=tempweight
                    nextVertex = vertex2
                    self.vertices[sourceVertex][0] = nextVertex
                    self.vertices[sourceVertex][1] = weight

        if len(self.unVisitedVertices)!= 0:

            if nextVertex!= None:
                self.prims(nextVertex)
            else:
                sourceVertex = self.unVisitedVertices[0]
                self.visitedVertices.append(sourceVertex)
                self.unVisitedVertices.remove(sourceVertex)
                for i in range(len(self.adjList[sourceVertex])):
                    vertex1 = sourceVertex
                    vertex2 = self.adjList[sourceVertex][i]
                    weight = self.vertices[sourceVertex][1]
                    for j in range(len(self.edges)):
                        if self.edges[j][0] == vertex1 and self.edges[j][1] == vertex2 or self.edges[j][0] == vertex2 and self.edges[j][1] == vertex1:
                            tempweight = self.edges[j][2]
                            break
                    if weight > tempweight:
                            weight = tempweight
                            nextVertex = vertex2
                            self.vertices[sourceVertex][0] = nextVertex
                            self.vertices[sourceVertex][1] = weight

def main():

    # UnDirected Graph
    edge0 = Edge(0, 1, 9)
    edge1 = Edge(0, 2, 75)
    edge2 = Edge(1, 2, 95)
    edge3 = Edge(1, 3, 19)
    edge4 = Edge(1, 4, 42)
    edge5 = Edge(2, 3, 51)
    edge6 = Edge(3, 4, 31)

    edges = [edge0, edge1, edge2, edge3, edge4, edge5, edge6]

    graph = Graph(edges)

    graph.printGraph()

    print("====Running Prims to get MST====")
    mst = graph.prims(0)
    graph.printVertices()


if __name__ == '__main__':
    main()
